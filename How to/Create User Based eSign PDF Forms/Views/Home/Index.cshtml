@{
    ViewData["Title"] = "Home Page";
}
@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@{
    string dropdownMenu = "#e-pv-e-sign-dropdown-menu";
    string btntemplate = "#e-pv-e-sign-btn-template";
    bool showSignButton = true; // Replace with your actual logic
    bool showFinishSigningButton = false; // Replace with your actual logic
}
@{
    var Modalanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };
    var Okbutton = new
    {
        content = "OK",
    };
}
@using Syncfusion.EJ2
    <div style="display:flex">
        <div class="e-pv-e-sign-control control-section" style="width:100%">
            @{
                List<object> userDetails = new List<object>
        {
        new { Name = "Andrew Fuller", Eimg = "profile2", Id = "ff0000", Mail = "andrew@mycompany.com", fieldIds = new List<int>() },
        new { Name = "Anne Dodsworth", Eimg = "profile1", Id = "00ff00", Mail = "anne@mycompany.com", fieldIds = new List<int>() }
        };
            }
            <div id="e-pv-e-sign-dropdown-menu" style="position: absolute; left: 0; z-index: 1000;">
                <ejs-dropdownlist id="e-pv-e-sign-employees" dataSource="@userDetails" index="0" popupHeight="200px" select="userChange"
                                  itemTemplate="@Html.Raw("<div style='display: flex; height: 50px; width: 200px;'><img class='e-pv-e-sign-empImage' src='../css/pdfviewer/images/employees/${Eimg}.png' style='margin: 10px 6px; border-radius: 50%; border: 1px solid ${getBorderColor(Mail)};' height='30px' width='30px' alt='employee'/><div><div class='e-pv-e-sign-ename'>${Name}</div><div class='e-pv-e-sign-ejob'>${Mail}</div></div></div>")"
                                  valueTemplate="@Html.Raw("<div style='display: flex;'><img id='user-img' class='valueTemp' src='../css/pdfviewer/images/employees/${Eimg}.png' style='margin: 3px 6px; border-radius: 50%; border: 1px solid ${getBorderColor(Mail)};' height='30px' width='30px' alt='employee'/><div><div class='e-pv-e-sign-name' style='margin-top: 3px;'>${Name}</div><div class='e-pv-e-sign-job'>${Mail}</div></div></div>")">
                    <e-dropdownlist-fields text="Name" value="Id"></e-dropdownlist-fields>
                </ejs-dropdownlist>
            </div>
            <div id="e-pv-e-sign-btn-template">
              <ejs-button id="e-pv-e-sign-finishSigning" content="Finish Signing" tooltipText="Finish Signing" cssClass="e-outline"></ejs-button>
            </div>
            <ejs-toolbar id="e-pv-e-sign-toolbar-section" cssClass="e-pv-e-sign-toolbar-section">
                <e-toolbar-items>
                    <e-toolbar-item template="@dropdownMenu" tooltipText="User Dropdown" align="Left"></e-toolbar-item>
                    <e-toolbar-item id="e-pv-e-sign-download" tooltipText="Sign" text="Sign" click="signFile" showTextOn="Overflow" align="Right"></e-toolbar-item>
                    <e-toolbar-item id="e-pv-e-sign-finish" template="@btntemplate" showTextOn="Overflow" align="Right" click="finishSigning"></e-toolbar-item>
                </e-toolbar-items>
            </ejs-toolbar>
            <div style="display: flex; position:relative;">
                <ejs-sidebar id="sidebarObj" Width="200px" Position="Left" HtmlAttributes="ViewBag.HtmlAttribute" enableGestures="false">
                    <e-content-template>
                        <div style="font-weight: 500; font-size: 16px; width: 43px; height: 24px; margin: 25px 10px 5px;">
                            Fields
                        </div>
                        <div style="display: flex; margin-left: 3px;">
                            <ejs-button id="signature-btn" class="e-pv-e-sign-form-field-property" iconCss="e-icons e-signature" content="Signature" cssClass="e-outline"></ejs-button>
                            <ejs-button id="initial-btn" class="e-pv-e-sign-form-field-property" iconCss="e-icons e-font-name" content="Initial" cssClass="e-outline"></ejs-button>
                        </div>
                        <div style="display: flex; margin-left: 3px;">
                            <ejs-button id="textbox-btn" class="e-pv-e-sign-form-field-property" iconCss="e-icons e-text-form" content="Textbox" cssClass="e-outline"></ejs-button>
                            <ejs-button id="password-btn" class="e-pv-e-sign-form-field-property" iconCss="e-icons e-password" content="Password" cssClass="e-outline"></ejs-button>
                        </div>
                        <div style="display: flex; margin-left: 3px;">
                            <ejs-button id="checkbox-btn" class="e-pv-e-sign-form-field-property" iconCss="e-icons e-check-box" content="Checkbox" cssClass="e-outline"></ejs-button>
                            <ejs-button id="radio-btn" class="e-pv-e-sign-form-field-property" iconCss="e-icons e-radio-button" content="Radio" cssClass="e-outline"></ejs-button>
                        </div>
                        <div style="display: flex; margin-left: 3px;">
                            <ejs-button id="dropdown-btn" class="e-pv-e-sign-form-field-property" iconCss="e-icons e-drop-down" content="Dropdown" cssClass="e-outline"></ejs-button>
                            <ejs-button id="list-btn" class="e-pv-e-sign-form-field-property" iconCss="e-icons e-list-unordered" content="Listbox" cssClass="e-outline"></ejs-button>
                        </div>
                    </e-content-template>
                </ejs-sidebar>
                <div id="pdf-div" style="width: calc(100% - 200px);">
                <ejs-pdfviewer id="pdfviewer" enableToolbar="false" enableNavigationToolbar="false" downloadFileName='eSign_designMode.pdf'
                                   showNotificationDialog="false" documentPath="https://cdn.syncfusion.com/content/PDFViewer/Fill+and+Sign.pdf" documentLoad="documentLoad"
                                   resourceUrl="https://cdn.syncfusion.com/ej2/23.2.6/dist/ej2-pdfviewer-lib"
                               formFieldAdd="addFormField" pageClick="pageClick" formFieldPropertiesChange="fieldChange" downloadFileName="fileName"
                               downloadEnd="downloadEnd" width="100%" zoomMode='FitToPage'
                                   toolbarSettings='@(new Syncfusion.EJ2.PdfViewer.PdfViewerToolbarSettings {ShowTooltip = true, ToolbarItems = "OpenOption,PageNavigationTool,MagnificationTool,DownloadOption,PrintOption,FormDesignerEditTool"})'>
                    </ejs-pdfviewer>
                </div>
            <ejs-dialog id="modal_dialog" animationSettings="Modalanimation" width="335px" isModal="true" created="modalCreated" content="content" visible="false">
                <e-dialog-buttons>
                    <e-dialog-dialogbutton buttonModel="Okbutton" click="dlgButtonClick"></e-dialog-dialogbutton>
                </e-dialog-buttons>
            </ejs-dialog>
            </div>
        </div>
    </div>

<style>
    .e-pv-e-sign-control {
        font-family: Roboto;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        letter-spacing: 0.24px;
    }

    .e-pv-e-sign-form-field-property {
        width: 72px;
        height: 72px;
        margin: 10px;
        border-radius: 8px;
        display: grid;
        place-content: center;
        line-height: 18px;
        font-weight: 400;
        font-family: 'Roboto';
        font-size: 12px;
        border: 1px solid #C4C7C5 !important;
    }

        .e-pv-e-sign-form-field-property .e-btn-icon {
            font-size: 14px;
            margin: 6px 10px !important;
        }

    .e-pv-e-sign-toolbar-section {
        z-index: 1001;
        width: 100% !important;
        height: 48px !important;
        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30);
    }

    #sidebarObj {
        position: absolute;
        border-right: 1px solid #C4C7C5;
        border-left: 1px solid #C4C7C5;
    }

    #e-pv-e-sign-download {
        width: 80px !important;
        height: 32px;
        flex-shrink: 0;
        border-radius: 16px;
        border: 1px solid var(--Color-variables-outline, #79747E);
    }

        #e-pv-e-sign-download span:first-child {
            margin-top: 3px;
        }

    #e-pv-e-sign-dropdown-menu {
        width: 190px;
        position: absolute;
        left: 0px;
    }

        #e-pv-e-sign-dropdown-menu .e-input-group {
            border: none;
        }

            #e-pv-e-sign-dropdown-menu .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::before,
            #e-pv-e-sign-dropdown-menu .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::after {
                width: 0px;
            }

    .e-pv-e-sign-name,
    .e-pv-e-sign-ename {
        margin-top: 10px;
        font-size: 14px;
        font-family: Roboto;
        font-style: normal;
        font-weight: 400;
        line-height: 18px;
    }

    .e-pv-e-sign-job,
    .e-pv-e-sign-ejob {
        font-size: 12px;
        font-family: Roboto;
        font-style: normal;
        font-weight: 400;
        line-height: 12px;
        letter-spacing: 0.2px;
    }

    .e-pv-e-sign-ename,
    .e-pv-e-sign-ejob {
        position: relative;
        right: 15px;
    }

    #e-pv-e-sign-dropdown-menu .e-input-group .e-control-wrapper .e-ddl e-lib .-keyboard .e-valid-input {
        border: none !important;
    }

    #e-pv-e-sign-employees_popup {
        width: 200px !important;
        z-index: 1000 !important;
    }

    #e-pv-e-sign-finishSigning {
        width: 125px !important;
        height: 32px;
        padding: 0;
        border-radius: 16px;
    }

    #modal_dialog_dialog-content {
        padding: 30px 20px 0px 60px !important;
    }
</style>

<script type="text/javascript">
    var pdfViewer;
    var currentUser = "andrew@mycompany.com";
    var userColor = "#ffefef";
    var userDetails = [
        { Name: 'Andrew Fuller', Eimg: 'profile2', Id: "ff0000", Mail: "andrew@mycompany.com", fieldIds: [] },
        { Name: 'Anne Dodsworth', Eimg: 'profile1', Id: "00ff00", Mail: "anne@mycompany.com", fieldIds: [] }
    ];
    var defaultFieldWidth = 200;
    var defaultFieldHeight = 24;
    var checkBoxFieldSize = 20;
    var radioFieldSize = 20;
    var SignatureFieldSize = 66;
    var ListFieldSize = 66;
    var currentFieldType = '';
    var isDropped = false;
    var zoomfactor;
    var currentUserBorderColor = 'red';
    var preventChange = false;
    var state = false;
    var fileName = "eSign_designMode.pdf";
    var dialogObj;
    var otherFormFieldDetails;
    var currentFormFieldDetails;
    var formFieldCollections;
    var andrewBackground = '#ffefef';
    var anneBackground = '#eff7ef';
    var finishedBackground = '#daeaf7ff';

    function initializeDraggable(element, fieldType) {
        let cloneElement;
        new ej.base.Draggable(element, {
            helper: (e) => {
                zoomFactor = pdfViewer.viewerBase.getZoomFactor();
                cloneElement = document.createElement('div');
                cloneElement.style.width = (defaultFieldWidth * zoomFactor) + 'px';
                cloneElement.style.height = (defaultFieldHeight * zoomFactor) + 'px';
                cloneElement.style.borderRadius = '0';
                cloneElement.style.opacity = '0.5';
                switch (fieldType) {
                    case 'SignatureField':
                    case 'InitialField':
                        cloneElement.style.height = (SignatureFieldSize * zoomFactor) + 'px';
                        break;
                    case 'CheckBox':
                        cloneElement.style.height = (checkBoxFieldSize * zoomFactor) + 'px';
                        cloneElement.style.width = (checkBoxFieldSize * zoomFactor) + 'px';
                        break;
                    case 'RadioButton':
                        cloneElement.style.height = (radioFieldSize * zoomFactor) + 'px';
                        cloneElement.style.width = (radioFieldSize * zoomFactor) + 'px';
                        cloneElement.style.borderRadius = '50%';
                        break;
                    case 'ListBox':
                        cloneElement.style.height = (ListFieldSize * zoomFactor) + 'px';
                        break;
                }
                cloneElement.style.backgroundColor = currentUser === 'andrew@mycompany.com' ? '#ffefef' : '#eff7ef';
                cloneElement.style.zIndex = '10001';
                cloneElement.style.position = 'absolute';
                cloneElement.style.pointerEvents = 'none';
                document.body.appendChild(cloneElement);
                return cloneElement;
            },
            dragStart: (e) => {
                currentFieldType = fieldType;
                isDropped = true;
            },
            dragStop: (e) => {
                if (e.helper && e.helper.parentNode) {
                    e.helper.parentNode.removeChild(e.helper);
                }
                isDropped = false;
            },
            clone: true,
            cursorAt: getCursorAtPosition(fieldType),
            enableTailMode: true,
        });
    }

    function getCursorAtPosition(fieldType) {
        zoomFactor = pdfViewer.viewerBase.getZoomFactor();
        var left, top;

        let scaledWidth = defaultFieldWidth * zoomFactor;
        let scaledHeight = defaultFieldHeight * zoomFactor;

        switch (fieldType) {
            case 'CheckBox':
            case 'RadioButton':
                scaledWidth = checkBoxFieldSize * zoomFactor;
                scaledHeight = checkBoxFieldSize * zoomFactor;
                left = 0;
                top = (checkBoxFieldSize / 2) * zoomFactor - (scaledHeight / 2);
                break;
            case 'ListBox':
                scaledHeight = ListFieldSize * zoomFactor;
                left = 90;
                top = (ListFieldSize / 2) * zoomFactor - (scaledHeight / 2);
                break;
            case 'SignatureField':
            case 'InitialField':
                scaledHeight = SignatureFieldSize * zoomFactor;
                left = 90;
                top = (SignatureFieldSize / 2) * zoomFactor - (scaledHeight / 2);
                break;
            default:
                scaledHeight = defaultFieldHeight * zoomFactor;
                left = 90;
                top = (defaultFieldHeight / 2) * zoomFactor - (scaledHeight / 2);
                break;
        }

        left = left / zoomFactor - (scaledWidth / 2);
        return { left: left, top: top };
    }

    function pageClick(args) {
        if (isDropped) {
            isDropped = false;
            let width = defaultFieldWidth;
            let height = defaultFieldHeight;
            switch (currentFieldType) {
                case 'SignatureField':
                case 'InitialField':
                    height = SignatureFieldSize;
                    break;
                case 'CheckBox':
                case 'RadioButton':
                    width = checkBoxFieldSize;
                    height = checkBoxFieldSize;
                    break;
                case 'ListBox':
                    height = ListFieldSize;
                    break;
            }
            userColor = currentUser === 'andrew@mycompany.com' ? '#ffefef' : '#eff7ef';
            pdfViewer.formDesignerModule.addFormField(currentFieldType, { bounds: { X: args.x, Y: args.y, Width: width, Height: height }, backgroundColor: userColor });
        }
    }

    function userChange(args) {
        currentUser = args.itemData.Mail;
        if (args.itemData.Mail === 'andrew@mycompany.com') {
            document.getElementById('user-img').style.borderColor = 'red';
        } else {
            document.getElementById('user-img').style.borderColor = 'green';
        }
        if (showFinishSigningButton) {
            updateUserFormField();
            if (preventChange) {
                document.getElementById('user-img').style.borderColor = 'red';
                args.cancel = true;
            }
        }
    }

    function getBorderColor(email) {
        return email === 'andrew@mycompany.com' ? 'red' : 'green';
    }

    function documentLoad() {
        pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (showFinishSigningButton) {
            pdfViewer.designerMode = false;
            updateUserFormField();
            pdfViewer.updateViewerContainer();
        }else{
            pdfViewer.designerMode = true;

            initializeDraggable(document.getElementById('signature-btn'), 'SignatureField');
            initializeDraggable(document.getElementById('textbox-btn'), 'Textbox');
            initializeDraggable(document.getElementById('password-btn'), 'Password');
            initializeDraggable(document.getElementById('checkbox-btn'), 'CheckBox');
            initializeDraggable(document.getElementById('radio-btn'), 'RadioButton');
            initializeDraggable(document.getElementById('dropdown-btn'), 'DropDown');
            initializeDraggable(document.getElementById('list-btn'), 'ListBox');
            initializeDraggable(document.getElementById('initial-btn'), 'InitialField');
        }
    }

    function addFormField(args) {
        if (currentUser === 'andrew@mycompany.com') {
            pdfViewer.formDesigner.updateFormField(pdfViewer.retrieveFormFields()[pdfViewer.formFieldCollections.length - 1], { customData: { author: 'andrew' } });
        } else {
            pdfViewer.formDesigner.updateFormField(pdfViewer.retrieveFormFields()[pdfViewer.formFieldCollections.length - 1], { customData: { author: 'anne' } });
        }

        var currentUserDetails = userDetails.filter(userDetail => userDetail.Mail === currentUser)[0];
        var currentFormField = pdfViewer.formFieldCollections.filter(formField => formField.id === args.field.id)[0];
        currentUserDetails.fieldIds.push(currentFormField);
    }

    var data;
    var base64data
    function signFile() {
        pdfViewer.saveAsBlob().then(function (value) {
            data = value;
            var reader = new FileReader();
            reader.readAsDataURL(data);
            reader.onload = () => {
                base64data = reader.result;
                pdfViewer.load(base64data, null);
                pdfViewer.width = "100%";
                pdfViewer.updateViewerContainer();
            };
        })
        showSignButton = false;
        showFinishSigningButton = true;
        document.getElementById("sidebarObj").style.display = "none";
        document.getElementById("pdf-div").style.width = "100%";
        document.getElementById("pdf-div").style.marginLeft = "0";
        updateToolbar();
    } 
    function updateToolbar() {
        var signButton = document.getElementById("e-pv-e-sign-download");
        var finishButton = document.getElementById("e-pv-e-sign-finishSigning");

        if (showSignButton) {
            signButton.style.display = '';
        } else {
            signButton.style.display = 'none';
        }

        if (showFinishSigningButton) {
            finishButton.style.display = '';
        } else {
            finishButton.style.display = 'none';
        }
    }

    function getBorderColor(email) {
        return email === 'andrew@mycompany.com' ? 'red' : 'green';
    }

    function modalCreated() {
        dialogObj = this;
    }

    function dlgButtonClick() {
        dialogObj.hide();
    }

    function updateUserFormField() {
        formFieldCollections = pdfViewer.formFieldCollections;
        otherFormFieldDetails = formFieldCollections.filter(formField => formField.customData.author === 'anne');
        currentFormFieldDetails = formFieldCollections.filter(formField => formField.customData.author === 'andrew');

        if (currentUser === 'andrew@mycompany.com') {
            otherFormFieldDetails.forEach(field => {
                if (field.value !== "") {
                    pdfViewer.formDesigner.updateFormField(field, { backgroundColor: finishedBackground });
                    pdfViewer.formDesignerModule.updateFormField(field, { isReadOnly: true });
                    currentFormFieldDetails.forEach(currentField => {
                        pdfViewer.formDesigner.updateFormField(currentField, { backgroundColor: andrewBackground });
                        pdfViewer.formDesignerModule.updateFormField(currentField, { isReadOnly: true });
                    });
                } else {
                    currentFormFieldDetails.forEach(currentField => {
                        pdfViewer.formDesigner.updateFormField(currentField, { backgroundColor: andrewBackground });
                    });
                }
                var otherUserField = document.getElementById(field.id + '_content_html_element');
                if (otherUserField) {
                    var currentFormField = pdfViewer.formFieldCollections.find(formField => formField.id === field.id);
                    if (currentFormField.type !== 'DropDown') {
                        if (!currentFormField.value && otherUserField)
                            pdfViewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });
                    } else {
                        if (currentFormField.value.length !== 0 && otherUserField)
                            pdfViewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });
                    }
                }
            });
        } else {
            validation(currentFormFieldDetails);
            if (!state) {
                currentFormFieldDetails.forEach(field => {
                    pdfViewer.formDesigner.updateFormField(field, { backgroundColor: finishedBackground });
                    pdfViewer.formDesignerModule.updateFormField(field, { isReadOnly: true });
                    otherFormFieldDetails.forEach(otherField => {
                        pdfViewer.formDesigner.updateFormField(otherField, { backgroundColor: anneBackground });
                        pdfViewer.formDesignerModule.updateFormField(otherField, { isReadOnly: false });
                    });
                });
                otherFormFieldDetails.forEach(field => {
                    var otherUserField = document.getElementById(field.id + '_content_html_element');
                    if (otherUserField) {
                        pdfViewer.formDesignerModule.updateFormField(field, { visibility: 'visible' });
                    }
                });
            }
        }
    }

    function validation(forms) {
        let errorMessage = "Required Field(s): ";
        let flag = false;
        let radioGroupName = "";
        let isAllFieldFilled = true;

        forms.forEach(form => {
            let text = "";
            switch (form.type.toString()) {
                case "Checkbox":
                    if (!form.isChecked) {
                        text = form.name;
                        isAllFieldFilled = false;
                    }
                    break;
                case "RadioButton":
                    if (!flag) {
                        radioGroupName = form.name;
                        if (form.isSelected) flag = true;
                    }
                    break;
                case "DropdownList":
                    if (form.value.length === 0) {
                        text = form.name;
                        isAllFieldFilled = false;
                    }
                    break;
                default:
                    if (!form.value || (typeof form.newValue === 'string' && form.newValue === "")) {
                        text = form.name;
                        isAllFieldFilled = false;
                    }
                    break;
            }
            if (text) {
                errorMessage = errorMessage === "Required Field(s): " ? errorMessage + text : errorMessage + ", " + text;
            }
        });

        if (!flag && radioGroupName) {
            errorMessage = errorMessage === "Required Field(s): " ? errorMessage + radioGroupName : errorMessage + ", " + radioGroupName;
            isAllFieldFilled = false;
        }

        if (errorMessage !== "Required Field(s): ") {
            state = true;
            dialogObj.content = errorMessage;
            dialogObj.show();
            preventChange = true;
        } else {
            state = false;
            preventChange = false;
        }
    }

    function fieldChange(args) {
        let errorMessage = "Required Field(s): ";
        const forms = pdfViewer.formFieldCollections;
        let flag = false;
        let isAllFieldFilled = true;
        let radioGroupName = "";

        forms.forEach(form => {
            let text = "";
            if (form.type.toString() === "Checkbox" && !form.isChecked) {
                text = form.name;
                isAllFieldFilled = false;
            } else if (form.type === "RadioButton" && !flag) {
                radioGroupName = form.name;
                if (form.isSelected) flag = true;
            } else if (form.type.toString() !== "Checkbox" && form.type !== "RadioButton" && (!form.value || (typeof args.newValue === 'string' && args.newValue === ""))) {
                text = form.name;
                isAllFieldFilled = false;
            } else if (form.type.toString() === "DropdownList" && form.value.length === 0) {
                text = form.name;
                isAllFieldFilled = false;
            }

            if (text) {
                errorMessage = errorMessage === "Required Field(s): " ? errorMessage + text : errorMessage + ", " + text;
            }
        });

        if (!flag && radioGroupName) {
            errorMessage = errorMessage === "Required Field(s): " ? errorMessage + radioGroupName : errorMessage + ", " + radioGroupName;
            isAllFieldFilled = false;
        }

        document.getElementById('e-pv-e-sign-finishSigning').disabled = !isAllFieldFilled;
    }

    function finishSigning() {
        for (const formField of pdfViewer.formFieldCollections) {
            pdfViewer?.formDesignerModule.updateFormField(formField, { backgroundColor: finishedBackground });
        }
        var url = '/api/Home/FlattenDownload';
        pdfViewer.saveAsBlob().then((blob) => {
            return convertBlobToBase64(blob);
        }).then((base64String) => {
            const xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
            const requestData = JSON.stringify({ base64String: base64String });
            xhr.onload = () => {
                if (xhr.status === 200) {
                    const responseBase64 = xhr.responseText.split('base64,')[1];
                    if (responseBase64) {
                        const blob = createBlobFromBase64(responseBase64, 'application/pdf');
                        const blobUrl = URL.createObjectURL(blob);
                        downloadDocument(blobUrl);
                        pdfViewer.load(xhr.responseText, null);
                        document.getElementById('e-pv-e-sign-finishSigning').disabled = true;
                        document.getElementById('e-pv-e-sign-employees').ej2_instances[0].enabled = false;
                    } else {
                        console.error('Invalid base64 response.');
                    }
                } else {
                    console.error('Download failed:', xhr.statusText);
                }
            };
            xhr.onerror = () => {
                console.error('An error occurred during the download:', xhr.statusText);
            };
            xhr.send(requestData);
        }).catch((error) => {
            console.error('Error saving Blob:', error);
        });

    }

    function convertBlobToBase64(blob) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(blob);
            reader.onloadend = () => {
                if (typeof reader.result === 'string') {
                    resolve(reader.result);
                } else {
                    reject(new Error('Failed to convert Blob to Base64'));
                }
            };
            reader.onerror = (error) => reject(error);
        });
    }

    function createBlobFromBase64(base64String, contentType) {
        const sliceSize = 512;
        const byteCharacters = atob(base64String);
        const byteArrays = [];
        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            const slice = byteCharacters.slice(offset, offset + sliceSize);
            const byteNumbers = new Array(slice.length);
            for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }
        return new Blob(byteArrays, { type: contentType });
    }

    function downloadDocument(blobUrl) {
        const anchorElement = document.createElement('a');
        anchorElement.href = blobUrl;
        anchorElement.target = '_parent';
        const downloadFileName = 'e-signForm.pdf';
        anchorElement.download = downloadFileName.endsWith('.pdf')
            ? downloadFileName
            : `${downloadFileName.split('.pdf')[0]}.pdf`;
        document.body.appendChild(anchorElement);
        anchorElement.click();
        document.body.removeChild(anchorElement);
        URL.revokeObjectURL(blobUrl);
    }
    let showSignButton = @Html.Raw(showSignButton.ToString().ToLower());
    let showFinishSigningButton = @Html.Raw(showFinishSigningButton.ToString().ToLower());

    document.addEventListener('DOMContentLoaded', function () {
        updateToolbar();
    });

    function downloadEnd(args) {
        pdfViewer.load(args.downloadDocument, null);
        document.getElementById('e-pv-e-sign-finishSigning').disabled = true;
        document.getElementById('e-pv-e-sign-employees').ej2_instances[0].enabled = false;
    }
</script>


@section Title {
    <title>ASP.NET Core PDF Viewer eSigning Form Designer Example - Syncfusion Demos </title>
}
@section Header {
    <h1 class='sb-sample-text'>Example of eSigning Form Designer in ASP.NET Core PDF Viewer Control</h1>
}

